//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: opentelemetry/proto/collector/logs/v1/logs_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service that can be used to push logs between one Application instrumented with
/// OpenTelemetry and an collector, or between an collector and a central collector (in this
/// case logs are sent/received to/from multiple Applications).
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Opentelemetry_Proto_Collector_Logs_V1_LogsServiceProvider: CallHandlerProvider {
  var interceptors: Opentelemetry_Proto_Collector_Logs_V1_LogsServiceServerInterceptorFactoryProtocol? { get }

  /// For performance reasons, it is recommended to keep this RPC
  /// alive for the entire life of the application.
  func export(request: Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse>
}

extension Opentelemetry_Proto_Collector_Logs_V1_LogsServiceProvider {
  internal var serviceName: Substring {
    return Opentelemetry_Proto_Collector_Logs_V1_LogsServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Export":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest>(),
        responseSerializer: ProtobufSerializer<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse>(),
        interceptors: self.interceptors?.makeExportInterceptors() ?? [],
        userFunction: self.export(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Service that can be used to push logs between one Application instrumented with
/// OpenTelemetry and an collector, or between an collector and a central collector (in this
/// case logs are sent/received to/from multiple Applications).
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Opentelemetry_Proto_Collector_Logs_V1_LogsServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Opentelemetry_Proto_Collector_Logs_V1_LogsServiceServerInterceptorFactoryProtocol? { get }

  /// For performance reasons, it is recommended to keep this RPC
  /// alive for the entire life of the application.
  func export(
    request: Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Opentelemetry_Proto_Collector_Logs_V1_LogsServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Opentelemetry_Proto_Collector_Logs_V1_LogsServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Opentelemetry_Proto_Collector_Logs_V1_LogsServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Opentelemetry_Proto_Collector_Logs_V1_LogsServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Export":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest>(),
        responseSerializer: ProtobufSerializer<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse>(),
        interceptors: self.interceptors?.makeExportInterceptors() ?? [],
        wrapping: { try await self.export(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Opentelemetry_Proto_Collector_Logs_V1_LogsServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'export'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExportInterceptors() -> [ServerInterceptor<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest, Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse>]
}

internal enum Opentelemetry_Proto_Collector_Logs_V1_LogsServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LogsService",
    fullName: "opentelemetry.proto.collector.logs.v1.LogsService",
    methods: [
      Opentelemetry_Proto_Collector_Logs_V1_LogsServiceServerMetadata.Methods.export,
    ]
  )

  internal enum Methods {
    internal static let export = GRPCMethodDescriptor(
      name: "Export",
      path: "/opentelemetry.proto.collector.logs.v1.LogsService/Export",
      type: GRPCCallType.unary
    )
  }
}
